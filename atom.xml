<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://matusf.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://matusf.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-07-08T00:00:00+00:00</updated>
    <id>https://matusf.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Squeezing the most out of argparse</title>
        <published>2021-07-08T00:00:00+00:00</published>
        <updated>2021-07-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            Matúš Ferech
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://matusf.github.io/posts/squeezing-the-most-out-of-argparse/"/>
        <id>https://matusf.github.io/posts/squeezing-the-most-out-of-argparse/</id>
        
        <content type="html" xml:base="https://matusf.github.io/posts/squeezing-the-most-out-of-argparse/">&lt;p&gt;In this post, I would like to argue that Python&#x27;s &lt;code&gt;argparse&lt;&#x2F;code&gt; is often the right tool for the job, and you do not need to install additional CLI argument parsers. The straightforward reason to choose it might be that you want to write a simple script that you pass to your colleagues, and you do not want to bother them with the installation of dependencies. You want to make it as portable as possible. However, I will try to show you that there are other ones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-variables-from-env-as-well&quot;&gt;Getting variables from env as well&lt;&#x2F;h2&gt;
&lt;p&gt;Loading configuration from the environment is one of the &lt;a href=&quot;https:&#x2F;&#x2F;12factor.net&#x2F;config&quot;&gt;prefered ways&lt;&#x2F;a&gt; to configure applications. With &lt;code&gt;argparse&lt;&#x2F;code&gt;, you can load variables from both the environment as well as from the command line. Good use for this combination is when you need to load secret variables. Secret variables should be loaded from the environment since anyone can inspect running processes (&lt;code&gt;ps&lt;&#x2F;code&gt;) that include all CLI arguments and thus see the secrets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;getenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;argparse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ArgumentParser
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;add_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;--port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;making-sure-variables-are-loaded&quot;&gt;Making sure variables are loaded&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we can load a variable from the environment we want to make sure that the variable is passed either as a command-line argument or as an environment variable. Adding &lt;code&gt;required=True&lt;&#x2F;code&gt; to &lt;code&gt;add_argument&lt;&#x2F;code&gt; does not help since then the default option is ignored. However, there is a neat trick we can do. The command-line argument will be required if we have not found the variable in env.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;getenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;argparse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ArgumentParser
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;add_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;--port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;typed-environment-variables&quot;&gt;Typed environment variables&lt;&#x2F;h2&gt;
&lt;p&gt;The main advantage of &lt;code&gt;argparse&lt;&#x2F;code&gt; for me is that you can have typed environment variables. No need to convert environment variables to the desired type and manually handling exceptions. The type can be specified with a &lt;code&gt;type&lt;&#x2F;code&gt; keyword argument. Actually, &lt;code&gt;type&lt;&#x2F;code&gt; can be any callable that takes a string and returns the desired type. If it raises &lt;code&gt;TypeError&lt;&#x2F;code&gt; or &lt;code&gt;ValueError&lt;&#x2F;code&gt; a nice error message is displayed.&lt;&#x2F;p&gt;
&lt;p&gt;You can take it one step further by writing your own parse function. If the parsing fails, raise an &lt;code&gt;ArgumentTypeError&lt;&#x2F;code&gt; with a help message which will be shown to the user. The following example shows how to parse a variable from the environment with additional constraints using &lt;code&gt;argparse&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;getenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;argparse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;ArgumentTypeError
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#aa3731;&quot;&gt;parse_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;ArgumentTypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;must be non-negative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;port
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;add_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;--port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;parse_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After running it, we see a nice help message.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;python x.py --port -1
&lt;&#x2F;span&gt;&lt;span&gt;usage: x.py [-h] --port PORT
&lt;&#x2F;span&gt;&lt;span&gt;x.py: error: argument --port: must be non-negative
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;There is one gotcha though. Loading boolean variables from the environment and specifying &lt;code&gt;type&lt;&#x2F;code&gt; as &lt;code&gt;bool&lt;&#x2F;code&gt; is not sufficient since every non-empty string is considered to be true (even &lt;code&gt;&amp;quot;false&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;&amp;quot;no&amp;quot;&lt;&#x2F;code&gt; etc.). Therefore we need to use a different function, like &lt;code&gt;strtobool&lt;&#x2F;code&gt; as shown below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;getenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;argparse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ArgumentParser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;distutils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;util &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;strtobool
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;add_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;--foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;getenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4b83cd;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;strtobool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result of &lt;code&gt;strtobool&lt;&#x2F;code&gt; is wrapped in &lt;code&gt;bool&lt;&#x2F;code&gt; because unfortunately, it returns an int instead of bool (for &lt;a href=&quot;https:&#x2F;&#x2F;bugs.python.org&#x2F;issue27721&quot;&gt;historical reasons&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Let&#x27;s Hijack Some Packages!</title>
        <published>2020-10-29T00:00:00+00:00</published>
        <updated>2020-10-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            Matúš Ferech
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://matusf.github.io/posts/lets-hijack-some-packages/"/>
        <id>https://matusf.github.io/posts/lets-hijack-some-packages/</id>
        
        <content type="html" xml:base="https://matusf.github.io/posts/lets-hijack-some-packages/">&lt;p&gt;Being able to hijack a Python package gives you a lot of opportunities. &lt;code&gt;pip&lt;&#x2F;code&gt; does not just place a package to some specified location. It runs the &lt;code&gt;setup.py&lt;&#x2F;code&gt; file that comes with most packages. This means you are effectively running unknown code on your machine every time you install a new package. Moreover, since &lt;code&gt;pip&lt;&#x2F;code&gt; runs as your user, it has the same permissions you do&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. It can read ssh keys, gpg keys, inspect your home directory or install ransomware, you name it. Furthermore, according to the &lt;a href=&quot;https:&#x2F;&#x2F;www.tiobe.com&#x2F;tiobe-index&#x2F;python&#x2F;&quot;&gt;tiobe index&lt;&#x2F;a&gt;, Python is one of the most used languages in the world which makes it even more valuable resource to hijack. So, I hope, you are sold. Let’s do it!&lt;&#x2F;p&gt;
&lt;p&gt;Installing a malicious package on someone&#x27;s computer is easier than one would think. To find out how do we perform the attack, we need to understand how &lt;code&gt;pip&lt;&#x2F;code&gt; resolution works. Firstly, pip queries all repositories it knows. The default one is PyPI, however, you can specify additional ones with &lt;code&gt;--extra-index-url&lt;&#x2F;code&gt; option. After getting responses, it chooses the latest available version of the package. If responses with the same versions are received from multiple repositories, &lt;code&gt;pip&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pip&#x2F;issues&#x2F;5045#issue-301252726&quot;&gt;prefers PyPI&lt;&#x2F;a&gt; or treats them equally.&lt;&#x2F;p&gt;
&lt;p&gt;The important part for us is that it chooses the package with the latest version. To inject our malicious package, all we need to do is to guess the name of a package and create a new one with a higher version. Then we upload it PyPI. We choose PyPI since it’s the most widely used registry. Now when someone tries to install the package with the same name from some internal registry, &lt;code&gt;pip&lt;&#x2F;code&gt; will find our malicious version on PyPI and download it instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-we-do-about-it&quot;&gt;What can we do about it?&lt;&#x2F;h2&gt;
&lt;p&gt;One thing we can do is to install only from trusted registries, which is not ideal. To install a package from an internal repository, we would need to host its dependencies as well. How will we choose which dependencies to host? The simplest solution would be to mirror the PyPI. However, that is not always possible&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;&#x2F;code&gt; can be also used in &lt;a href=&quot;https:&#x2F;&#x2F;pip.pypa.io&#x2F;en&#x2F;stable&#x2F;reference&#x2F;pip_install&#x2F;#hash-checking-mode&quot;&gt;hash-checking mode&lt;&#x2F;a&gt; to verify packages against tempering. To ensure the authenticity, developers need to download hashes for every package by hand from registries and verify it themselves, which is so tedious and clumsy nobody does it. Some tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python-poetry&#x2F;poetry&quot;&gt;poetry&lt;&#x2F;a&gt; try to make it more userfriendly and download and verify those hashes for you, nonetheless, since they&#x27;re downloaded automatically from repositories, you lose the authenticity and are back in integrity check only.&lt;&#x2F;p&gt;
&lt;p&gt;Another solution is to be faster than the attacker. We create placeholders in PyPI first. The difference is that we will create them with low enough version instead of a higher one. Hence, when &lt;code&gt;pip&lt;&#x2F;code&gt; will query repositories for the specified package, it will receive responses from the internal registry as well as from PyPI. However, the package version from PyPI will be lower and &lt;code&gt;pip&lt;&#x2F;code&gt; will install the desired version.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless, creating and uploading a placeholder package for every internal package is an awful amount of work. That’s why we created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pan-net-security&#x2F;artifactory-pypi-scanner&quot;&gt;&lt;code&gt;artifactory-pypi-scanner&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which we use at Pan-Net. It lists all Python packages in a JFrog Artifactory instance. Then it checks whether they&#x27;re present on PyPI and creates new ones with the same name if they do not exist on PyPI. What&#x27;s more, when a conflicting package is found, the scanner will report it in a machine-readable format (&lt;code&gt;JSON&lt;&#x2F;code&gt;) for further processing.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested, you can go-get it from source or download pre-built binaries from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pan-net-security&#x2F;artifactory-pypi-scanner&#x2F;releases&quot;&gt;releases&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; get github.com&#x2F;pan-net-security&#x2F;artifactory-pypi-scanner
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;artifactory-pypi-scanner&lt;&#x2F;code&gt; is configured by environmental variables. For detailed usage instructions see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pan-net-security&#x2F;artifactory-pypi-scanner#configuration&quot;&gt;configuration section&lt;&#x2F;a&gt; in the GitHub repository.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#333333;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;$ artifactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;pypi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;scanner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a3e9d;&quot;&gt;jq
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;artifactoryPackages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;pypiPlaceholders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;repositoryResults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;https:&#x2F;&#x2F;af.example.com&#x2F;artifactory&#x2F;&#x2F;repository1-pypi-local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;packageResults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;package1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;isOurs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;https:&#x2F;&#x2F;af.example.com&#x2F;artifactory&#x2F;&#x2F;repository2-pypi-local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;packageResults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;package2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;isOurs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;package3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;isOurs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#448c27;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab6526;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#777777;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Please say you&#x27;re not running &lt;code&gt;pip&lt;&#x2F;code&gt; with &lt;code&gt;sudo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;For example A lets you set permissions only on a registry level. Thus, enabling anyone with access right to Artifactory to overwrite your Python package.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
</feed>
